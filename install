#!/usr/bin/env node

//must run as sudo
            
var config = {

	'appName': 'testApp',
	'execStart': 'server.js',
	'systemAction': '/home/master/system/script/system/action',
	'repoName': 'AaronDavisG/myApp',
	'repoURL': 'https://github.com',
	'repoEXT':'git',
	'owner':'master',
	'group':'master',
	'access':755,
	'port': process.env.PORT || 8080,
	'database': 'mongodb://localhost:27017/myDatabase',
	'databasePromise': 'bluebird',
	'secret': 'mySecret'
};

function dataPrompt(data, callback){

	console.log('starting util dataPrompt');

	var index = 0;
	var keys = Object.keys(data);
	var size = keys.length;

	if ( size > 0 ){

		var key = keys[index];
		var value = data[key];

		console.log('input ' + keys[index] );
		console.log('  defaultValue: ' + data[key]);
		
		process.stdin.resume();

		process.stdin.setEncoding('utf8');

		process.stdin.on('data', function (text) {

			if (text.length > 1){

				text = text.slice(0, text.length - 1);

				if (Number.isInteger(text)){

					data[key] = parseInt(text, 10);

				}else if( !isNaN(parseFloat(text)) ){

					data[key] = parseFloat(text);
				}else{
					data[key] = text;
				}
			}
			index++;

			if (index == size){
				
				console.log('util dataPromptdataPrompt success');

				process.stdin.pause();

				callback(null, data);
			}else{
				key = keys[index];
				value = data[key];

				console.log('input ' + keys[index]);
				console.log('  defaultValue: ' + data[key]);
			}
		});
	}else{
		console.log('util dataPromptdataPrompt success: (no data provided)');
	}
}

function deleteFolder(fs, path){

	console.log('starting util deleteFolder');

	if( fs.existsSync(path) ) {
	
		fs.readdirSync(path).forEach(function(file,index){
	
			var curPath = path + "/" + file;

			if(fs.lstatSync(curPath).isDirectory()) {
				
				deleteFolder(fs, curPath);
			} else {
				fs.unlinkSync(curPath);
			}
		});
		fs.rmdirSync(path);
	}
	console.log('util deleteFolder success');
}

function cloneRepo(exec, systemAction, dirName, repoName, repoURL, repoEXT, callback){

	console.log('starting util cloneRepo');

	exec(systemAction +
		' git cloneRepo ' +
		systemAction + ' ' +
		repoName + ' ' +
		repoURL + ' ' +
		repoEXT,
		function (error, stdout, stderr) {

			if(stdout){
				console.log(stdout);
			}
			if (error) {
				
				console.log('util cloneRepo error: ' + error);
			} else {
				console.log('util cloneRepo success');
			}
			callback(error);
		}
	);
}

function install(fs, exec, config, callback){

	console.log('starting install: process ' + process.pid);

	console.log('starting install config promt');

	dataPrompt(config,
		function(error, config){
		
			if (error) {
				console.log('install config promt error: process ' + process.pid + ' exit');
				process.exit(1);
			}else{
				console.log('install config promt success');
			}
			var appDir = __dirname + '/' + config.appName;

			deleteFolder(fs, appDir);

	    	fs.mkdirSync(appDir);
			
			console.log('starting install cloneRepo');

	 		cloneRepo(exec, 
	 			config.systemAction,
	 			process.cwd() + '/' + config.appName, 
	 			config.repoName,
	 			config.repoURL,
	 			config.repoEXT,
				function(error){

					if (error) {
						console.log('install cloneRepo error: process ' + process.pid + ' exit');
						process.exit(1);
					}else{
						console.log('install cloneRepo success');
					}
					var util = require('./' + config.appName + '/util');

					console.log('starting install write config');

					util.writeExports(fs,
						appDir + '/config.js',
						config,
						function(error){
					
							if (error) {
								console.log('install write config error: process ' + process.pid + ' exit');
								process.exit(1);
							}else{
								console.log('install write config success');
							}
							var systemServicePath = '/lib/systemd/system/' + config.appName + '.service';

							var systemService = '' +
								'[Unit]\n' +
								'Description=Node.js ' + config.appName + '\n' +
								'Requires=After=mongod.service\n' +
								'[Service]\n' +
								'ExecStart=/usr/bin/env node ' + appDir + '/' + config.execStart + '\n' +
								'Restart=always\n' +
								'RestartSec=10\n' +
								'User='+ config.owner + '\n' +
								'Group='+ config.group + '\n' +
								'StandardOutput=syslog\n' +
								'StandardError=syslog\n' +
								'SyslogIdentifier=nodejs-' + config.appName + '\n' +
								'Environment=NODE_ENV=production PORT=' + config.port +'\n' +

								'[Install]\n' +
								'WantedBy=multi-user.target\n';
							
							console.log('starting install write system service');

							util.write(fs,
								systemServicePath,
								systemService,
								function(error){
											
									if (error) {
										console.log('install write system service error: process ' + process.pid + ' exit');
										process.exit(1);
									}else{
										console.log('install system service success');
									}
									console.log('starting install npmInstall');

									util.npmInstall(exec,
										appDir,
										function(error){

											if (error) {
												console.log('install npmInstall error: process ' + process.pid + ' exit');
												process.exit(1);
											}else{
												console.log('install npmInstall success');
											}
											console.log('starting install setPermission');

											util.setPermission(exec, 
												appDir,
												config.owner,
												config.group,
												config.access,
												function(error){

													if (error) {
														console.log('install setPermission error: process ' + process.pid + ' exit');
														process.exit(1);
													}else{
														console.log('install setPermission success');
													}
													console.log('install success');

													fs.unlinkSync(__filename);

													callback(error);
												}
											);
										}
									);
								}
							);
						}
					);
				}
			);
		}
	);
}
                                   
install(require('fs'),
	require('child_process').exec,
	config,
	function(error){

		if(error){
			console.log('error: process ' + process.pid + ' exit');
			process.exit(1);
		}else{
			console.log('success: process ' + process.pid + ' exit');
			process.exit(0);
		}
	}
);
